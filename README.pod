=pod

=head1 NAME

Starch::Remote::App - A plack application for running the Starch remote service.

=head1 SYNOPSIS

Create a C<starch-remote.psgi> file:

    use Starch::Remote::App;
    
    Starch::Remote::App->new(
        starch => {
            store => { class => '::Memory' },
            plugins => ['::CookieArgs'],
        },
    )->to_app();

Then launch it:

    plackup starch-remote.psgi

=head1 DESCRIPTION

This L<Plack> service exposes L<Starch> in a way that allows for mostly
hands-free integration of Starch with disparate HTTP applications, including
applications written in other languages.  Having a central engine for
managing sessions can be especially important in polyglot organizations,
allowing for web applications to be written in multiple languages yet
still share the same session backend and logic.

=head1 INTEGRATION

The typical setup is an arbitrary web application which needs to access
sessions as part of handling a request.  This web application has no knowledge
of how sessions are stored or how they are tracked.  In order to retrofit
the web application to use the Starch remote a request would be handled
like this:

=over

=item 1

A request is begun in the web application.

=item 2

The web application issues a C<POST> subrequest agains the C</begin> endpoint
of the Starch remote service.  The C<POST> subrequest includes all
HTTP headers that the web application received in it's request.

=item 3

The Starch remote's response includes the L<Starch::State/id> and the
L<Starch::State/data> of the session.  If no C<id> could be derived from
the hedaers supplied in the subrequest then a new state will be created and
it's C<id> and empty C<data> will be returned.

=item 4

The web application's main logic steps in and handles the request.  The web
application will read, and potentially, write to the C<data> hash as needed.

=item 5

When the web application is ready to send response headers back to the client
it issues a C<POST> subrequest agains the C</finish> endpoint of the Starch
remote service.  The C<POST> subrequest includes the C<id> and C<data>
originally supplied in step #3, but the C<data> may have been modified during
step #4.

=item 6

The Starch remote's response to the subrequest contains HTTP headers for the
web application to include in it's response to the request.

=item 7

And, finally, the web application returns a response.

=back

See L</ENDPOINTS> for more, including example request and response JSON bodies.

=head1 CLIENTS

L<Starch::Remote::Client> is a client for this service.

L<Catalyst::Plugin::Starch::Remote> causes Catalyst to use this
service for sessions retrieval and storage.

=head1 REQUIRED ARGUMENTS

=head2 starch

    Starch::Remote::App->new(
        starch => {
            store => { class => '::Memory' },
            plugins => [ '::CookieArgs' ],
        },
    );

This may be either a L<Starch> object, or hashref arguments to create one.

The L<Starch::Plugin::CookieArgs> plugin is required.

=head1 OPTIONAL_ARGUMENTS

=head2 validate_res

    Starch::Remote::App->new(
        starch => ...,
        validate_res => 1,
    );

When enabled this causes the response data to be validated.  By default
this is off.  This is made available for debugging and unit testing.

=head1 ENDPOINTS

=head2 POST /begin

Expects the request content to be a JSON object with a single key, `headers`,
containing an array of all HTTP headers that the caller received.

On success, returns a C<200> response with the content containing a JSON object
with the C<id> key set to the ID of the Starch state, and a C<data> key containing
the state data.

Example request content:

    {
        "headers": [
            "Acccept-Language", "en-us",
            "Cookie", "session=4f29abc0917cb119a86c8b15e70503a4380667bf"
        ]
    }

Example response content:

    {
        "id": "4f29abc0917cb119a86c8b15e70503a4380667bf",
        "data": {"foo":1}
    }

If the request content does not contain JSON, or the JSON is invalid, then
a C<400> response will be returned and the content will be a string explaining
the issue.

=head2 POST /finish

Expects the request content to be a JSON object with the `id` key set to the ID
of the Starch state, and the `data` key set to the new state data to be saved.

On success, returns a C<200> response with the content containing a JSON object
with the C<headers> key set to an array of key/value pairs.

Example request content:

    {
        "id": "4f29abc0917cb119a86c8b15e70503a4380667bf",
        "data": {"foo":1,"bar":2}
    }

Example response content:

    {
        "headers": [
            "Set-Cookie",
            "session=4f29abc0917cb119a86c8b15e70503a4380667bf; domain=.example.com; path=/; ..."
        ]
    }

If the request content does not contain JSON, or the JSON is invalid, then
a C<400> response will be returned and the content will be a string explaining
the issue.

=head1 AUTHOR

Aran Clary Deltac <bluefeetE<64>gmail.com>

=head1 ACKNOWLEDGEMENTS

Thanks to L<ZipRecruiter|https://www.ziprecruiter.com/>
for encouraging their employees to contribute back to the open
source ecosystem.  Without their dedication to quality software
development this distribution would not exist.

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
